/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package see;

import com.digitalpersona.uareu.Engine;
import com.digitalpersona.uareu.Fid;
import com.digitalpersona.uareu.Fmd;
import com.digitalpersona.uareu.Reader;
import com.digitalpersona.uareu.ReaderCollection;
import com.digitalpersona.uareu.UareUException;
import com.digitalpersona.uareu.UareUGlobal;
import java.awt.Color;

/**
 *
 * @author NWACHUKWU
 */
public class Who extends javax.swing.JFrame {

    private Reader reader = null;
    private Engine engine = null;

    /**
     * Creates new form Who
     */
    public Who() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        lnLabel = new javax.swing.JLabel();
        verifyButton = new javax.swing.JButton();
        lnTextField = new javax.swing.JTextField();
        mnTextField = new javax.swing.JTextField();
        fnTextField = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        mnLabel = new javax.swing.JLabel();
        fnLabel = new javax.swing.JLabel();
        uidLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        yfnLabel = new javax.swing.JLabel();
        ymnLabel = new javax.swing.JLabel();
        ylnLabel = new javax.swing.JLabel();
        yuidLabel = new javax.swing.JLabel();
        identifyButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lnLabel.setText("Last name:");

        verifyButton.setText("Verify");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        mnLabel.setText("Middle name:");

        fnLabel.setText("First name:");

        uidLabel.setText("Unique ID:");

        yfnLabel.setText("Your First name!");

        ymnLabel.setText("Your Middle name!");

        ylnLabel.setText("Your Last name!");

        yuidLabel.setText("Your Unique ID!");

        identifyButton.setText("Identify");
        identifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identifyButtonActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lnLabel)
                                    .addComponent(fnLabel)
                                    .addComponent(uidLabel))
                                .addGap(19, 19, 19))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(mnLabel)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lnTextField)
                            .addComponent(jTextField4)
                            .addComponent(fnTextField)
                            .addComponent(mnTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(verifyButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yfnLabel)
                    .addComponent(ymnLabel)
                    .addComponent(ylnLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(identifyButton)
                        .addComponent(yuidLabel)))
                .addGap(93, 93, 93))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lnLabel)
                                .addComponent(lnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(yfnLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mnLabel)
                            .addComponent(ymnLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ylnLabel)))
                    .addComponent(fnLabel))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uidLabel)
                    .addComponent(yuidLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verifyButton)
                    .addComponent(identifyButton))
                .addContainerGap(101, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        // TODO add your handling code here:
        try {
            Reader.CaptureResult cr;
            Reader.Status rs = reader.GetStatus(); // "Reader is ready for capture."
            if (rs.status.equals(Reader.ReaderStatus.READY)) {

                System.out.println("status " + rs); // rs == "Reader is ready for capture."
                System.out.println("status " + rs.status);

                int tryingcount = 1;
                do {
                    System.out.println(String.format("trying to read finger for the %d time", tryingcount));

                    cr = reader.Capture(Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_DEFAULT, 500, 1000 * 9); // -1 for last argument means block until we get finger print

                    System.out.println("cr quality:");
                    System.out.println(cr.quality);
                    if (cr.quality.equals(Reader.CaptureQuality.GOOD)) {
                        System.out.println("doing comparision because good quality");
                        Fmd fmd = engine.CreateFmd(cr.image, Fmd.Format.ANSI_378_2004);
                        // do the identification here!
                        //target false positive identification rate: 0.00001
                        //for a discussion of setting the threshold as well as the statistical validity of the dissimilarity score and error rates, consult the Developer Guide.
                        int falsepositive_rate = Engine.PROBABILITY_ONE / 100000;

                        Engine.Candidate[] validCandidates = engine.Identify(fmd, 0, db.GetAll.getDetails(), falsepositive_rate, 1);
                    }
                    tryingcount++;

                } while (!cr.quality.equals(Reader.CaptureQuality.GOOD) && tryingcount < 4);

                // always the last thing.
                reader.Close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_verifyButtonActionPerformed

    private void identifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identifyButtonActionPerformed
        // TODO add your handling code here:
        try {
            Reader.CaptureResult cr;
            Reader.Status rs = reader.GetStatus(); // "Reader is ready for capture."
            if (rs.status.equals(Reader.ReaderStatus.READY)) {
                // jPanel1.setBackground(Color.YELLOW);
                System.out.println("status " + rs); // rs == "Reader is ready for capture."
                System.out.println("status " + rs.status);

                int tryingcount = 1;
                do {
                    System.out.println(String.format("trying to read finger for the %d time", tryingcount));

                    cr = reader.Capture(Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_DEFAULT, 500, 1000 * 9); // -1 for last argument means block until we get finger print

                    System.out.println("cr quality:");
                    System.out.println(cr.quality);
                    if (cr.quality.equals(Reader.CaptureQuality.GOOD)) {
                        // jPanel1.setBackground(Color.GREEN);
                        System.out.println("inside");
                        // use imagePanel
                        Fid k = cr.image;
                        // System.out.println(String.format("k: %d", k));
                        
                        System.out.println(String.format("k.getCbeffId(): %d", k.getCbeffId()));
                        System.out.println(String.format("k.getFingerCnt(): %d", k.getFingerCnt()));
                        System.out.println(String.format("k.getImageResolution(): %d", k.getImageResolution()));
                        

                        byte[] imgData = k.getData(); // we shouldn't save this
                        
                        // db.Save.saveDetails(k.getViews()[0].getImageData()); // save to db
                        // OR
                        db.Save.saveDetails(imgData);
                        show.FingerByteImage.ToImage(k); // let's see it // formerly imgData
                        System.out.println(String.format("byte[] imgData length: %d", imgData.length));
                        // Try.getImage(imgData);

                        // Fid.Format o = k.getFormat(); // Format is either Fid.Format.ANSI_381_2004 or ...
                        // System.out.println(String.format("Fid.Format: %d", o));
                        
                        show.FingerImage sj = new show.FingerImage();
                        sj.showImage(k);


                        // to extract features and do comparison
                        // Engine engine = UareUGlobal.GetEngine();
                        Fmd[] m_fmds = new Fmd[2]; //two FMDs to perform comparison
                        try {
                            Fmd fmd = engine.CreateFmd(cr.image, Fmd.Format.ANSI_378_2004);
                            // db.Save.saveDetails(fmd.getData());
                            
                            // db.Save.saveDetails(fmd.getViews()[0].getData());
                            
                            m_fmds[0] = fmd;
                            
                            System.out.println("fmd format:" + fmd.getFormat());
                            System.out.println("fmd .getResolution():" + fmd.getResolution());
                            System.out.println("fmd.getWidth():" + fmd.getWidth());
                            System.out.println("fmd.getHeight():" + fmd.getHeight());
                            System.out.println("fmd.getCbeffId():" + fmd.getCbeffId());
                            
                            // CreateFmd(byte[] data, int width, int height, int resolution, int finger_position, int cbeff_id, Fmd.Format format)
                            // TODO: get m_fmds[1] from database
                            
                            m_fmds[1] = engine.CreateFmd(db.Get.getDetails("fas", "fas", 50, "ASFDF44", 4334), 252, 324, 500, 1, 3407615, Fmd.Format.ANSI_378_2004);
                            
                            // m_fmds[1] = engine.CreateFmd(db.Get.getDetails("fas", "fas", 44, "ASFDF44", 4334), 252, 324, 197, 1, 3407615, Fmd.Format.ANSI_378_2004);
                            
                            if (null != m_fmds[0] && null != m_fmds[1]) { //perform comparison
                                int falsematch_rate = engine.Compare(m_fmds[0], 0, m_fmds[1], 0);

                                int target_falsematch_rate = Engine.PROBABILITY_ONE / 100000; //target rate is 0.00001
                                
                                if (falsematch_rate < target_falsematch_rate) {
                                    System.out.println("Fingerprints matched.");
                                    System.out.println(String.format("dissimilarity score: 0x%x.", falsematch_rate));
                                    
                                    System.out.println(String.format("false match rate: %e.", (double) (falsematch_rate / Engine.PROBABILITY_ONE)));
                                    
                                } else {
                                    System.out.println("Fingerprints did not match.");
                                }
                            }

                        } catch (UareUException e) {
                            System.out.println("Engine.CreateFmd() error: " + e);
                            e.printStackTrace();
                        }
                    }
                    tryingcount++;
                } while (!cr.quality.equals(Reader.CaptureQuality.GOOD) && tryingcount < 4);

                // always the last thing.
                reader.Close();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_identifyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Who.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Who.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Who.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Who.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Who who = new Who();
                who.setVisible(true);
                // try to make sure the device is good and ready
                try {
                    ReaderCollection rc = UareUGlobal.GetReaderCollection();

                    rc.GetReaders();
                    who.engine = UareUGlobal.GetEngine();
                    /*
                        if (rc.size() > 0){
                        }
                     */
                    who.reader = rc.get(0);
                    who.reader.Open(Reader.Priority.EXCLUSIVE);

                    who.verifyButton.setBackground(Color.GREEN); // means we're good to go
                } catch (UareUException e) {
                    // if it isn't good/ready
                    System.out.println("bad on who starting, we can't ger a fingerprint reader");
                    who.verifyButton.setBackground(Color.red);
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fnLabel;
    private javax.swing.JTextField fnTextField;
    private javax.swing.JButton identifyButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lnLabel;
    private javax.swing.JTextField lnTextField;
    private javax.swing.JLabel mnLabel;
    private javax.swing.JTextField mnTextField;
    private javax.swing.JLabel uidLabel;
    private javax.swing.JButton verifyButton;
    private javax.swing.JLabel yfnLabel;
    private javax.swing.JLabel ylnLabel;
    private javax.swing.JLabel ymnLabel;
    private javax.swing.JLabel yuidLabel;
    // End of variables declaration//GEN-END:variables
}
