/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package see;

import com.digitalpersona.uareu.Engine;
import com.digitalpersona.uareu.Fid;
import com.digitalpersona.uareu.Fmd;
import com.digitalpersona.uareu.Reader;
import com.digitalpersona.uareu.ReaderCollection;
import com.digitalpersona.uareu.UareUException;
import com.digitalpersona.uareu.UareUGlobal;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.ImageIcon;

/**
 *
 * @author NWACHUKWU
 * 
 * The Singleton class is declared as final so no subclass can be created.
 * This restricts multiple instantiation even by sub classing this class.
 * The constructor is declared private;
 * as a result, only the Singleton class can create a Singleton object using this constructor.
 * The static reference to the Singleton object invokes the private constructor
 * and delivers only one instance of the class. On invocation of the getInstance() method,
 * only the reference copy of the object is received.
 * 
 * https://www.developer.com/java/data/implementing-singleton-patterns-in-java.html
 */
public /*final */class Start extends javax.swing.JFrame {

    private Reader reader = null;
    private Engine engine = null;
    private int enrollmentCount = 0;
    
    // --start
    // implementing singlton design pattern
    // https://www.developer.com/java/data/implementing-singleton-patterns-in-java.html
    /*
    public static final Start singleInstance = new Start();
    
    public static Start getInstance(){
        return singleInstance;
    }
    */
    // --end

    /**
     * Creates new form Start
     */
    public Start() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        verifyButton = new javax.swing.JButton();
        enrollButton = new javax.swing.JButton();
        fnLabel = new javax.swing.JLabel();
        lnLabel = new javax.swing.JLabel();
        mnLabel = new javax.swing.JLabel();
        fnTextField = new javax.swing.JTextField();
        mnTextField = new javax.swing.JTextField();
        lnTextField = new javax.swing.JTextField();
        instructionsLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setOpaque(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        verifyButton.setText("Verify");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        enrollButton.setText("Enroll");
        enrollButton.setEnabled(false);
        enrollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollButtonActionPerformed(evt);
            }
        });

        fnLabel.setText("Firstname:");

        lnLabel.setText("Lastname:");

        mnLabel.setText("Middlename:");

        fnTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnTextFieldActionPerformed(evt);
            }
        });

        lnTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnTextFieldActionPerformed(evt);
            }
        });

        instructionsLabel.setText("...");

        idLabel.setText("Unique ID:");

        idTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instructionsLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mnLabel)
                            .addComponent(lnLabel)
                            .addComponent(fnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(mnTextField)
                                .addComponent(lnTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                .addComponent(fnTextField)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(enrollButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fnLabel)
                            .addComponent(fnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mnLabel)
                            .addComponent(mnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lnLabel)
                            .addComponent(lnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(idLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(verifyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enrollButton)
                    .addComponent(instructionsLabel))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("ShowFingerprintImage");
        jPanel1.getAccessibleContext().setAccessibleDescription("Shows the image of the scanned fingerprint");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        // click to verify a finger:
        // jPanel1.setBackground(Color.RED); // why show red first ?
        try {
            Reader.CaptureResult cr;
            Reader.Status rs = reader.GetStatus(); // "Reader is ready for capture."
            if (rs.status.equals(Reader.ReaderStatus.READY)) {
                jPanel1.setBackground(Color.YELLOW);
                System.out.println("status " + rs); // rs == "Reader is ready for capture."
                System.out.println("status " + rs.status);
                
                int tryingcount = 1;
            do {
                System.out.println(String.format("trying to read finger for the %d time", tryingcount));

                cr = reader.Capture(Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_DEFAULT, 500, 1000 * 9); // -1 for last argument means block until we get finger print
//                reader.StartStreaming();
//                cr = reader.GetStreamImage(Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_PIV, 500);
//                reader.StopStreaming();

                System.out.println("cr quality:");
                System.out.println(cr.quality);
                if (cr.quality.equals(Reader.CaptureQuality.GOOD)) {
                    jPanel1.setBackground(Color.GREEN);
                }
                tryingcount++;
            } while (!cr.quality.equals(Reader.CaptureQuality.GOOD) && tryingcount < 4);

            // always the last thing.
            reader.Close();
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_verifyButtonActionPerformed

    private void enrollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollButtonActionPerformed
        // TODO add your handling code here:
        
        // try twice. if we get it for the first finger, we should try twice again for the 2nd finger.
        int enrollCount = 0; // zero-based because array is zero-based.
        Fmd[] fmds = new Fmd[2]; // two FMDs to store for the left and right thumb
        instructionsLabel.setText("Place your " + (enrollCount == 0 ? "LEFT THUMB" : "RIGHT THUMB") + " on the reader.");
        do {
            
            Fmd enrollmentFmd = null; // initialize to null so we can check later if it's != null
            instructionsLabel.setText("Place your " + (enrollCount == 0 ? "LEFT THUMB" : "RIGHT THUMB") + " on the reader.");
            instructionsLabel.setText("Place your " + (enrollCount == 0 ? "LEFT THUMB" : "RIGHT THUMB") + " on the reader.");
            System.out.println((enrollCount == 0 ? "LEFT THUMB" : "RIGHT THUMB"));
            try {
                enrollmentFmd = engine.CreateEnrollmentFmd(Fmd.Format.ANSI_378_2004, new Engine.EnrollmentCallback() {
                    int count = 0;
                    @Override
                    public Engine.PreEnrollmentFmd GetFmd(Fmd.Format format) {
                        Engine.PreEnrollmentFmd prefmd = new Engine.PreEnrollmentFmd(); // or null

                        try {
                            System.out.println("Place your finger for reading. " + ++count);
                            
                            Reader.CaptureResult cr = reader.Capture(Fid.Format.ANSI_381_2004, Reader.ImageProcessing.IMG_PROC_DEFAULT, 500, 1000 * 9); // -1 for last argument means block until we get finger print
                            System.out.println("Read.");
                            instructionsLabel.setText("Read.");
                            System.out.println();

                            if (cr.quality.equals(Reader.CaptureQuality.GOOD)) {
                                System.out.println("cr quality: " + cr.quality);

                                Fmd fmd = engine.CreateFmd(cr.image, Fmd.Format.ANSI_378_2004);

                                //return prefmd 
                                prefmd.fmd = fmd;
                                prefmd.view_index = 0; // finger position ... must always be zero

                                // maybe create image to show
                                Fid.Fiv view = cr.image.getViews()[0];
                                BufferedImage bImage = new BufferedImage(view.getWidth(), view.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
                                bImage.getRaster().setDataElements(0, 0, view.getWidth(), view.getHeight(), view.getImageData());
                                
                                System.out.println("We're painting");
                                
                                // make an image
                                // show.FingerByteImage.ToImage(cr.image);
                                
                                /**
                                 https://docs.oracle.com/javase/7/docs/api/constant-values.html#java.awt.image.ImageObserver.ALLBITS
                                 * ALLBITS = 32
                                 */
                                /*
                                boolean good = jPanel1.imageUpdate((java.awt.Image)bImage, java.awt.image.ImageObserver.ALLBITS, 0, 0, view.getHeight() + 40, view.getWidth() + 15);
                                System.out.println("about the image " + good);
                                jPanel1.repaint();
                                */
                                
                                // C:\Users\NWACHUKWU\Documents\NetBeansProjects\Finger\fingerimages\1576538746321.png
                                // jPanel1.add(new JLabel(new javax.swing.ImageIcon(bImage, "Fingerprint Image")));
                                jPanel1.add(new JLabel(new ImageIcon("1576538746321.png", "Fingerprint Image")));
                                
                                
                                // jPanel1.paintComponents(bImage.getGraphics());
                                
                                /*
                                jPanel1.add(new Component(){
                                    JPanel panel = new JPanel(){
                                        @Override
                                        protected void paintComponent(Graphics g){
                                            super.paintComponent(g);
                                            g.drawImage(bImage, 0, 0, null);
                                        }
                                    };
                                    
                                });
                                */
                                
                                // jPanel1.imageUpdate(bImage, NORMAL, count, count, WIDTH, WIDTH);
                                
                                // jPanel1.createImage(view.getWidth(), view.getHeight()); 
                                
                                // jPanel1.paint(bImage.getGraphics());
                                
                                /*
                                jPanel1.add(new JPanel(){
                                    
                                    @Override
                                    protected void paintComponent(Graphics g){
                                        super.paintComponent(g);
                                        g.drawImage(bImage, 0, 0, null);
                                        // g.drawImage(bImage, 0, 0, this);
                                        // g.drawImage(bImage, 0, 0, jPanel1);
                                    }
                                });
                                */
                                
                                /*
                                start.jPanel1.createImage(new ImageProducer() {
                                    @Override
                                    public void requestTopDownLeftRightResend(ImageConsumer ic);
                                });
                                */
                                
                                 // we done
                                System.out.println("We got it.");
                            } else {
                                System.out.println("We couldn't read fingerprint. Try again.");
                                instructionsLabel.setText("We couldn't read fingerprint. Try again.");
                                
                                // prefmd = null; // ? No.
                            }
                        } catch (UareUException e) {
                            e.printStackTrace();
                        }
                        return prefmd;

                        // throw new UnsupportedOperationException("Not supported yet.");
                        // To change body of generated methods, choose Tools | Templates.
                    };
                });
            } catch (UareUException e) {
                e.printStackTrace();
            }
            
            if (enrollmentFmd != null) {
                fmds[enrollCount] = enrollmentFmd;
                enrollCount++;
                
                System.out.println((enrollCount == 0 ? "Done Right thumb. Again." : "Done Left thumb. End."));
                
                // TODO, only output "Details saved." if we get a response from the db that the details were actually saved.
                instructionsLabel.setText((enrollCount == 0 ? "Done Right thumb. Again." : "Done Left thumb."));
                if (enrollCount == 2) { // because we've incremented it
                    // enable the save button... ?
                    // should it automatically save the person? and clear the input fields for the names and disable enroll ?
                    boolean r = db.SaveUser.saveDetails(fmds[0].getData(), fmds[1].getData(), lnTextField.getText(), mnTextField.getText(), fnTextField.getText());
                    
                    if (r) { // r is either true or false
                        instructionsLabel.setText(instructionsLabel.getText() + " Details saved.");
                    }
                    // clear input fields for names
                    lnTextField.setText("");
                    mnTextField.setText("");
                    fnTextField.setText("");
                    idTextField.setText("");
                    
                    // next line doesn't work... why ?
                    jPanel1.setBackground(Color.YELLOW);
                    
                    // disable enroll Button
                    enrollButton.setEnabled(false);
                    
                    jPanel1.add(new JLabel(new ImageIcon("Finger\\see\\1576538746321.png" , "Fingerprint Image")));
                }
                
            } else {
                System.out.println("// it means we didn't get a result for prefmd-enrollmentFmd. Try again.");
                // take progress bar back to zero
            }
            
        } while (enrollCount < 2); // do twice (0 & 1). manipulate (decrement enrollCount?!) inside do-while if we run into some issues


    }//GEN-LAST:event_enrollButtonActionPerformed

    private void fnTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnTextFieldActionPerformed

    private void lnTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lnTextFieldActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        try {
            reader.Close();
            System.out.println("closed reader");
            System.exit(0);
        } catch (UareUException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosed

    private void idTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Start.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
            // what happens if the reader is removed mid-process ?????
            // we should always check if the reader is ready before doing anything
                Start start = new Start();
                start.setVisible(true);

                // add keypress event listeners
                start.lnTextField.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        // System.out.println("KeyChar:" + e.getKeyChar());

                        // enable if the firstname and lastname fields aren't empty
                        if (start.fnTextField.getText().length() > 2 && start.lnTextField.getText().length() > 2 && start.idTextField.getText().length() > 4) {
                            start.enrollButton.setEnabled(true);
                        } else {
                            start.enrollButton.setEnabled(false);
                        }
                    }
                });

                start.fnTextField.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        // System.out.println("KeyChar:" + e.getKeyChar());

                        // enable if the firstname and lastname fields aren't empty
                        if (start.fnTextField.getText().length() > 2 && start.lnTextField.getText().length() > 2 && start.idTextField.getText().length() > 4) {
                            start.enrollButton.setEnabled(true);
                        } else {
                            start.enrollButton.setEnabled(false);
                        }
                    }
                });
                
                start.idTextField.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        // System.out.println("KeyChar:" + e.getKeyChar());

                        // enable if the firstname and lastname fields aren't empty
                        if (start.fnTextField.getText().length() > 2 && start.lnTextField.getText().length() > 2 && start.idTextField.getText().length() > 4) {
                            start.enrollButton.setEnabled(true);
                        } else {
                            start.enrollButton.setEnabled(false);
                        }
                    }
                });
                
                // try to make sure the device is good and ready
                try {
                    ReaderCollection rc = UareUGlobal.GetReaderCollection();

                    rc.GetReaders();
                    start.engine = UareUGlobal.GetEngine();
                    /*
                        if (rc.size() > 0){
                        }
                     */
                    start.reader = rc.get(0);
                    start.reader.Open(Reader.Priority.EXCLUSIVE);

                    start.verifyButton.setBackground(Color.GREEN); // means we're good to go
                } catch (UareUException e) {
                    // if it isn't good/ready
                    System.out.println("bad on start");
                    start.verifyButton.setBackground(Color.red);
                    e.printStackTrace();
                }
            }
        });
    }
    
    
    
    public boolean/*Reader.Status*/ getReaderStatus(){
        boolean isReady = false;
        try {
            Reader.Status rs = reader.GetStatus();
            if (Reader.ReaderStatus.READY == rs.status) {
                isReady = true;
            }
        } catch (UareUException e) {
            e.printStackTrace();
        }
        
        return isReady;
    }
    
    /*Some piece of code*/
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton enrollButton;
    private javax.swing.JLabel fnLabel;
    private javax.swing.JTextField fnTextField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel instructionsLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lnLabel;
    private javax.swing.JTextField lnTextField;
    private javax.swing.JLabel mnLabel;
    private javax.swing.JTextField mnTextField;
    private javax.swing.JButton verifyButton;
    // End of variables declaration//GEN-END:variables
}
